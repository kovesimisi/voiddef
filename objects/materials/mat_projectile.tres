[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "color"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible, unshaded, shadows_disabled, ambient_light_disabled;

uniform vec4 Color : hint_color;
uniform float Intensity;



void vertex() {
// ColorUniform:2
	vec3 n_out2p0 = Color.rgb;
	float n_out2p1 = Color.a;

// ScalarUniform:3
	float n_out3p0 = Intensity;

// VectorOp:4
	vec3 n_out4p0 = n_out2p0 * vec3(n_out3p0);

// Output:0
	COLOR.rgb = n_out4p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1219, 103 )
flags/ambient_light_disabled = true
flags/shadows_disabled = true
flags/unshaded = true
nodes/vertex/2/node = SubResource( 6 )
nodes/vertex/2/position = Vector2( -380, 180 )
nodes/vertex/3/node = SubResource( 7 )
nodes/vertex/3/position = Vector2( -360, 380 )
nodes/vertex/4/node = SubResource( 8 )
nodes/vertex/4/position = Vector2( 20, 240 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 6 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 40, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[resource]
shader = SubResource( 4 )
shader_param/Color = Color( 0.941176, 0.0901961, 0.168627, 1 )
shader_param/Intensity = 10.0
